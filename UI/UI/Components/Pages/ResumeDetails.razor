@page "/resumes/{Id:int}"
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HttpClient Http
@rendermode InteractiveServer
@using System.Text.Json
@using System.Net.Http.Headers
@using BLL.DTO

<PageTitle>@(resume?.Title ?? "Резюме")</PageTitle>

<div class="container py-4">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Завантаження...</span>
            </div>
            <p class="mt-3 text-muted">Завантаження резюме...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle"></i>
            @errorMessage
        </div>
    }
    else if (resume == null)
    {
        <div class="text-center py-5">
            <div class="mb-4">
                <i class="bi bi-file-person" style="font-size: 4rem; color: #6c757d;"></i>
            </div>
            <h4 class="text-muted mb-3">Резюме не знайдено</h4>
            <p class="text-muted">Можливо, воно було видалено або у вас немає прав для його перегляду</p>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h3 class="mb-0">@resume.Title</h3>
                @if (CanEditResume())
                {
                    <div>
                        <button class="btn btn-light btn-sm me-2" @onclick="EditResume">
                            <i class="bi bi-pencil"></i> Редагувати
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="DeleteResume">
                            <i class="bi bi-trash"></i> Видалити
                        </button>
                    </div>
                }
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <h5 class="card-title mb-4">Опис</h5>
                        <p class="card-text">@resume.Description</p>

                        @if (!string.IsNullOrEmpty(resume.Experience))
                        {
                            <h5 class="card-title mt-4 mb-3">Досвід роботи</h5>
                            <p class="card-text">@resume.Experience</p>
                        }
                    </div>
                    <div class="col-md-4">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h6 class="card-subtitle mb-2 text-muted">Очікувана зарплата</h6>
                                <p class="card-text fs-4 text-success">@resume.ExpectedSalary.ToString("N0") грн</p>
                            </div>
                        </div>
                    </div>
                </div>

                @if (applications != null && applications.Any())
                {
                    <div class="mt-4">
                        <h5 class="card-title mb-3">Подані заявки</h5>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Вакансія</th>
                                        <th>Дата подачі</th>
                                        @if (CanManageApplications())
                                        {
                                            <th>Дії</th>
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var app in applications)
                                    {
                                        <tr>
                                            <td>
                                                <a href="/vacancies/@app.VacancyId" class="text-decoration-none">
                                                    @app.VacancyTitle
                                                </a>
                                            </td>
                                            <td>@app.SubmittedAt.ToString("dd.MM.yyyy HH:mm")</td>
                                            @if (CanManageApplications())
                                            {
                                                <td>
                                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteApplication(app.Id)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    <div class="mt-4">
        <a href="/resumes" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Назад до списку резюме
        </a>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private ResumeDetailsDTO? resume;
    private List<ResumeVacancyLinkDTO>? applications;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private UserDTO? currentUser;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCurrentUser();
            if (currentUser != null)
            {
                await LoadResume();
                await LoadApplications();
            }
            else
            {
                Navigation.NavigateTo("/auth");
            }
            StateHasChanged();
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                var response = await Http.GetAsync("api/auth/me");
                if (response.IsSuccessStatusCode)
                {
                    var userJson = await response.Content.ReadAsStringAsync();
                    currentUser = JsonSerializer.Deserialize<UserDTO>(userJson, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Помилка завантаження користувача: {ex.Message}");
            errorMessage = "Помилка автентифікації";
        }
    }

    private async Task LoadResume()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var response = await Http.GetAsync($"api/resume/{Id}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                resume = JsonSerializer.Deserialize<ResumeDetailsDTO>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                resume = null;
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                errorMessage = "У вас немає прав для перегляду цього резюме";
            }
            else
            {
                errorMessage = "Помилка завантаження резюме";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Помилка завантаження резюме: {ex.Message}");
            errorMessage = "Помилка зв'язку з сервером";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadApplications()
    {
        try
        {
            var response = await Http.GetAsync($"api/resumevacancylink/resume/{Id}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                applications = JsonSerializer.Deserialize<List<ResumeVacancyLinkDTO>>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Помилка завантаження заявок: {ex.Message}");
        }
    }

    private bool CanEditResume()
    {
        if (currentUser == null || resume == null) return false;
        return currentUser.Role == 0 || // Admin
               (currentUser.Role == 2 && resume.UserId == currentUser.Id); // Owner
    }

    private bool CanManageApplications()
    {
        if (currentUser == null || resume == null) return false;
        return currentUser.Role == 0 || // Admin
               (currentUser.Role == 2 && resume.UserId == currentUser.Id); // Owner
    }

    private void EditResume()
    {
        Navigation.NavigateTo($"/resumes/edit/{Id}");
    }

    private async Task DeleteResume()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Ви впевнені, що хочете видалити це резюме?"))
            return;

        try
        {
            var response = await Http.DeleteAsync($"api/resume/{Id}");
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Резюме успішно видалено");
                Navigation.NavigateTo("/resumes");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    errorMessage = errorResponse?.Message ?? "Помилка видалення резюме";
                }
                catch
                {
                    errorMessage = "Помилка видалення резюме";
                }
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Помилка видалення резюме: {ex.Message}");
            errorMessage = "Помилка зв'язку з сервером";
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
    }

    private async Task DeleteApplication(int applicationId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Ви впевнені, що хочете видалити цю заявку?"))
            return;

        try
        {
            var response = await Http.DeleteAsync($"api/resumevacancylink/{applicationId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadApplications();
                await JSRuntime.InvokeVoidAsync("alert", "Заявку успішно видалено");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                    errorMessage = errorResponse?.Message ?? "Помилка видалення заявки";
                }
                catch
                {
                    errorMessage = "Помилка видалення заявки";
                }
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Помилка видалення заявки: {ex.Message}");
            errorMessage = "Помилка зв'язку з сервером";
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
    }

    private class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }

    public class UserDTO
    {
        public int Id { get; set; }
        public string UserName { get; set; } = string.Empty;
        public int Role { get; set; }
    }

    public class ResumeDetailsDTO
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Experience { get; set; } = string.Empty;
        public decimal ExpectedSalary { get; set; }
        public int UserId { get; set; }
    }

    public class ResumeVacancyLinkDTO
    {
        public int Id { get; set; }
        public int ResumeId { get; set; }
        public int VacancyId { get; set; }
        public string ResumeTitle { get; set; } = string.Empty;
        public string VacancyTitle { get; set; } = string.Empty;
        public DateTime SubmittedAt { get; set; }
    }
} 
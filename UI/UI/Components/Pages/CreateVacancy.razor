@page "/vacancies/create"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text
@using System.Net.Http.Headers
@using System.ComponentModel.DataAnnotations

<PageTitle>Створити вакансію</PageTitle>

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Створити нову вакансію</h3>
                </div>
                <div class="card-body">
                    @if (!isInitialized)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Завантаження...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="vacancy" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />

                            <div class="mb-3">
                                <label for="title" class="form-label">Назва вакансії <span class="text-danger">*</span></label>
                                <InputText id="title" class="form-control" @bind-Value="vacancy.Title" placeholder="Наприклад: Senior Frontend Developer" />
                                <ValidationMessage For="@(() => vacancy.Title)" />
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Опис вакансії <span class="text-danger">*</span></label>
                                <InputTextArea id="description" class="form-control" rows="6" @bind-Value="vacancy.Description"
                                               placeholder="Опишіть обов'язки, вимоги до кандидата, умови роботи..." />
                                <ValidationMessage For="@(() => vacancy.Description)" />
                            </div>

                            <div class="mb-3">
                                <label for="experience" class="form-label">Вимоги до досвіду</label>
                                <InputTextArea id="experience" class="form-control" rows="4" @bind-Value="vacancy.Experience"
                                               placeholder="Опишіть необхідний досвід роботи, навички, технології..." />
                            </div>

                            <div class="mb-3">
                                <label for="salary" class="form-label">Запропонована зарплата</label>
                                <InputText id="salary" class="form-control" @bind-Value="vacancy.ExpectedSalary"
                                           placeholder="Наприклад: 25000-35000 грн або За домовленістю" />
                            </div>

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger">
                                    @errorMessage
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success">
                                    @successMessage
                                </div>
                            }

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="GoBack">
                                    <i class="bi bi-arrow-left"></i> Назад
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    }
                                    <i class="bi bi-save"></i> Створити вакансію
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateVacancyModel vacancy = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isSubmitting = false;
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (string.IsNullOrEmpty(token))
                {
                    Navigation.NavigateTo("/auth");
                    return;
                }

                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
                isInitialized = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing: {ex.Message}");
                Navigation.NavigateTo("/auth");
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var json = JsonSerializer.Serialize(vacancy);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await Http.PostAsync("api/vacancy", content);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Вакансію успішно створено!";
                await Task.Delay(1500);
                Navigation.NavigateTo("/");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Помилка: {response.StatusCode}. {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Сталася помилка: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    public class CreateVacancyModel
    {
        [Required(ErrorMessage = "Назва вакансії обов'язкова")]
        [StringLength(200, ErrorMessage = "Назва вакансії не може бути довшою за 200 символів")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Опис вакансії обов'язковий")]
        [StringLength(2000, ErrorMessage = "Опис не може бути довшим за 2000 символів")]
        public string Description { get; set; } = string.Empty;

        [StringLength(1000, ErrorMessage = "Вимоги до досвіду не можуть бути довшими за 1000 символів")]
        public string Experience { get; set; } = string.Empty;

        [StringLength(100, ErrorMessage = "Інформація про зарплату не може бути довшою за 100 символів")]
        public string ExpectedSalary { get; set; } = string.Empty;
    }
}
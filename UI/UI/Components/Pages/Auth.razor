@page "/auth"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="auth-container">
    <div class="auth-card">
        <h3 class="text-center mb-4">@(isLogin ? "Вхід" : "Реєстрація")</h3>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger">
                @errorMessage
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success">
                @successMessage
            </div>
        }

        <EditForm Model="@authModel" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />

            <div class="form-group mb-3">
                <label for="username" class="form-label">Ім'я користувача</label>
                <InputText id="username" class="form-control" @bind-Value="authModel.UserName" placeholder="Введіть ім'я користувача" />
                <ValidationMessage For="@(() => authModel.UserName)" />
            </div>

            <div class="form-group mb-3">
                <label for="password" class="form-label">Пароль</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="authModel.Password" placeholder="Введіть пароль" />
                <ValidationMessage For="@(() => authModel.Password)" />
            </div>

            @if (!isLogin)
            {
                <div class="form-group mb-3">
                    <label for="role" class="form-label">Роль</label>
                    <InputSelect id="role" class="form-control" @bind-Value="authModel.Role">
                        <option value="2">JobSeeker (Шукач роботи)</option>
                        <option value="1">Employer (Роботодавець)</option>
                        <option value="0">Admin (Адміністратор)</option>
                    </InputSelect>
                </div>
            }

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                @(isLogin ? "Увійти" : "Зареєструватися")
            </button>
        </EditForm>

        <div class="text-center mt-3">
            <button class="btn btn-link" @onclick="ToggleMode">
                @(isLogin ? "Немає акаунту? Зареєструйтеся" : "Вже є акаунт? Увійдіть")
            </button>
        </div>
    </div>
</div>

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .auth-card {
        background: white;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 400px;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-label {
        font-weight: 600;
        margin-bottom: 0.5rem;
        display: block;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 1rem;
    }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.25);
        }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 5px;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

    .btn-link {
        background: none;
        border: none;
        color: #667eea;
        text-decoration: none;
        font-size: 0.9rem;
    }

        .btn-link:hover {
            text-decoration: underline;
        }

    .alert {
        padding: 0.75rem;
        border-radius: 5px;
        margin-bottom: 1rem;
    }

    .alert-danger {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

    .alert-success {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }

    .w-100 {
        width: 100%;
    }

    .text-center {
        text-align: center;
    }

    .mb-3 {
        margin-bottom: 1rem;
    }

    .mb-4 {
        margin-bottom: 1.5rem;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    .me-2 {
        margin-right: 0.5rem;
    }

    .spinner-border {
        width: 1rem;
        height: 1rem;
        border: 0.125em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spin 0.75s linear infinite;
    }

    .spinner-border-sm {
        width: 0.875rem;
        height: 0.875rem;
        border-width: 0.125em;
    }

    /* CSS Animation */
    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    private bool isLogin = true;
    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";
    private AuthModel authModel = new();

    // Модель для форми
    public class AuthModel
    {
        [Required(ErrorMessage = "Ім'я користувача обов'язкове")]
        [MinLength(3, ErrorMessage = "Ім'я користувача повинно містити мінімум 3 символи")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Пароль обов'язковий")]
        [MinLength(6, ErrorMessage = "Пароль повинен містити мінімум 6 символів")]
        public string Password { get; set; } = string.Empty;

        public int Role { get; set; } = 0; // 0 = JobSeeker, 1 = Employer, 2 = Admin
    }

    // DTO для API
    public class LoginRequest
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class RegisterRequest
    {
        public string UserName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public int Role { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
        public UserDTO User { get; set; } = new();
        public DateTime ExpiresAt { get; set; }
    }

    public class UserDTO
    {
        public int Id { get; set; }
        public string UserName { get; set; } = string.Empty;
        public int Role { get; set; }
    }

    protected override void OnInitialized()
    {
        // Налаштування базової URL для API
        if (Http.BaseAddress == null)
        {
            Http.BaseAddress = new Uri("https://localhost:7000/"); // Змініть на URL вашого API
        }
    }

    private void ToggleMode()
    {
        isLogin = !isLogin;
        errorMessage = "";
        successMessage = "";
        authModel = new AuthModel();
    }

    private async Task HandleSubmit()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            if (isLogin)
            {
                await LoginAsync();
            }
            else
            {
                await RegisterAsync();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoginAsync()
    {
        var loginRequest = new LoginRequest
            {
                UserName = authModel.UserName,
                Password = authModel.Password
            };

        var json = JsonSerializer.Serialize(loginRequest);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await Http.PostAsync("api/auth/login", content);
        var responseContent = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            var loginResponse = JsonSerializer.Deserialize<LoginResponse>(responseContent, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

            // Зберігаємо токен в localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", loginResponse.Token);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "user", JsonSerializer.Serialize(loginResponse.User));

            successMessage = "Успішний вхід! Перенаправлення...";

            // Перенаправляємо на головну сторінку через 1 секунду
            await Task.Delay(1000);
            Navigation.NavigateTo("/");
        }
        else
        {
            var errorResponse = JsonSerializer.Deserialize<JsonElement>(responseContent);
            if (errorResponse.TryGetProperty("message", out var message))
            {
                errorMessage = message.GetString() ?? "Помилка входу";
            }
            else
            {
                errorMessage = "Невірне ім'я користувача або пароль";
            }
        }
    }

    private async Task RegisterAsync()
    {
        var registerRequest = new RegisterRequest
            {
                UserName = authModel.UserName,
                Password = authModel.Password,
                Role = authModel.Role
            };

        var json = JsonSerializer.Serialize(registerRequest);
        var content = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await Http.PostAsync("api/auth/register", content);
        var responseContent = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            successMessage = "Реєстрація успішна! Тепер ви можете увійти.";
            isLogin = true;
            authModel = new AuthModel { UserName = authModel.UserName }; // Зберігаємо username для входу
        }
        else
        {
            var errorResponse = JsonSerializer.Deserialize<JsonElement>(responseContent);
            if (errorResponse.TryGetProperty("message", out var message))
            {
                errorMessage = message.GetString() ?? "Помилка реєстрації";
            }
            else
            {
                errorMessage = "Помилка при реєстрації";
            }
        }
    }
}
@page "/vacancies/edit/{VacancyId:int}"
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HttpClient Http
@rendermode InteractiveServer
@using System.Text.Json
@using System.Net.Http.Headers
@using System.ComponentModel.DataAnnotations
@using BLL.DTO

<PageTitle>Редагування вакансії</PageTitle>

<div class="container py-4">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Завантаження...</span>
            </div>
            <p class="mt-3 text-muted">Завантаження даних...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle"></i>
            @errorMessage
        </div>
    }
    else if (vacancy == null)
    {
        <div class="text-center py-5">
            <div class="mb-4">
                <i class="bi bi-briefcase" style="font-size: 4rem; color: #6c757d;"></i>
            </div>
            <h4 class="text-muted mb-3">Вакансію не знайдено</h4>
            <p class="text-muted">Можливо, вона була видалена або у вас немає прав для її редагування</p>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h3 class="mb-0">Редагування вакансії</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@vacancy" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label for="title" class="form-label">Назва вакансії</label>
                        <InputText id="title" class="form-control" @bind-Value="vacancy.Title" />
                        <ValidationMessage For="@(() => vacancy.Title)" />
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Опис</label>
                        <InputTextArea id="description" class="form-control" rows="5" @bind-Value="vacancy.Description" />
                        <ValidationMessage For="@(() => vacancy.Description)" />
                    </div>

                    <div class="mb-3">
                        <label for="requirements" class="form-label">Вимоги</label>
                        <InputTextArea id="requirements" class="form-control" rows="3" @bind-Value="vacancy.Requirements" />
                        <ValidationMessage For="@(() => vacancy.Requirements)" />
                    </div>

                    <div class="mb-3">
                        <label for="salary" class="form-label">Зарплата (грн)</label>
                        <InputNumber id="salary" class="form-control" @bind-Value="vacancy.Salary" />
                        <ValidationMessage For="@(() => vacancy.Salary)" />
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Збереження...</span>
                            }
                            else
                            {
                                <span>Зберегти</span>
                            }
                        </button>
                        <a href="/vacancies/@VacancyId" class="btn btn-outline-secondary">Скасувати</a>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int VacancyId { get; set; }

    private VacancyEditDTO? vacancy;
    private bool isLoading = true;
    private bool isSaving = false;
    private string errorMessage = string.Empty;
    private UserDTO? currentUser;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCurrentUser();
            if (currentUser != null)
            {
                if (currentUser.Role != 0 && currentUser.Role != 1) // Not admin or employer
                {
                    Navigation.NavigateTo("/vacancies");
                    return;
                }
                await LoadVacancy();
            }
            else
            {
                Navigation.NavigateTo("/auth");
            }
            StateHasChanged();
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

                var response = await Http.GetAsync("api/auth/me");
                if (response.IsSuccessStatusCode)
                {
                    var userJson = await response.Content.ReadAsStringAsync();
                    currentUser = JsonSerializer.Deserialize<UserDTO>(userJson, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Помилка завантаження користувача: {ex.Message}");
            errorMessage = "Помилка автентифікації";
        }
    }

    private async Task LoadVacancy()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var response = await Http.GetAsync($"api/vacancy/{VacancyId}");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var details = JsonSerializer.Deserialize<VacancyDetailsDTO>(json, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });

                if (details != null)
                {
                    // Check if user has rights to edit
                    if (currentUser!.Role != 0 && details.UserId != currentUser.Id)
                    {
                        Navigation.NavigateTo("/vacancies");
                        return;
                    }

                    vacancy = new VacancyEditDTO
                    {
                        Title = details.Title,
                        Description = details.Description,
                        Requirements = details.Requirements,
                        Salary = details.Salary
                    };
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                vacancy = null;
            }
            else
            {
                errorMessage = "Помилка завантаження вакансії";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Помилка завантаження вакансії: {ex.Message}");
            errorMessage = "Помилка зв'язку з сервером";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSaving = true;
            errorMessage = string.Empty;

            var response = await Http.PutAsJsonAsync($"api/vacancy/{VacancyId}", vacancy);
            if (response.IsSuccessStatusCode)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Вакансію успішно оновлено");
                Navigation.NavigateTo($"/vacancies/{VacancyId}");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorResponse = JsonSerializer.Deserialize<ErrorResponse>(errorContent, new JsonSerializerOptions
                        {
                            PropertyNameCaseInsensitive = true
                        });
                    errorMessage = errorResponse?.Message ?? "Помилка оновлення вакансії";
                }
                catch
                {
                    errorMessage = "Помилка оновлення вакансії";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Помилка оновлення вакансії: {ex.Message}");
            errorMessage = "Помилка зв'язку з сервером";
        }
        finally
        {
            isSaving = false;
        }
    }

    private class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }

    public class UserDTO
    {
        public int Id { get; set; }
        public string UserName { get; set; } = string.Empty;
        public int Role { get; set; }
    }

    public class VacancyDetailsDTO
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Requirements { get; set; } = string.Empty;
        public decimal Salary { get; set; }
        public int UserId { get; set; }
    }

    public class VacancyEditDTO
    {
        [Required(ErrorMessage = "Назва вакансії обов'язкова")]
        [StringLength(100, ErrorMessage = "Назва вакансії не може бути довшою за 100 символів")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Опис вакансії обов'язковий")]
        public string Description { get; set; } = string.Empty;

        public string Requirements { get; set; } = string.Empty;

        [Required(ErrorMessage = "Зарплата обов'язкова")]
        [Range(0, 1000000, ErrorMessage = "Зарплата повинна бути в межах від 0 до 1,000,000")]
        public decimal Salary { get; set; }
    }
} 